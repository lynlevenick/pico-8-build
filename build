#!/usr/bin/env ruby
# frozen_string_literal: true

require "open3"
require "pathname"

root = Pathname.new(__dir__)
src = root.join("src")
bin = root.join("bin")

def pseudo_require(file, seen_files:)
  contents = file.read
  contents.gsub!(
    /^----[ \t]*require[ \t]*"((?:[^"]|\\.)*)"$/
  ) do |match|
    unless seen_files.include?($1)
      seen_files << $1
      pseudo_require(file.dirname.join($1), seen_files: seen_files)
    end
  end

  contents
end

def luamin(code)
  begin
    minified, status = Open3.capture2("luamin", "-c", stdin_data: code)
    raise "fatal: luamin: #{status}" unless status == 0

    minified
  rescue SystemCallError
    puts "Warning! Unable to call minifier"
    code
  end
end

cart = src.join("cart.p8")
cart_contents = cart.read
prefix, suffix = cart_contents.split(/(?<=__lua__\n)(?=(?:\n__[a-z]+__|\z))/)

source = luamin(pseudo_require(src.join("main.lua"), seen_files: []))

result_cart = bin.join("cart.p8")
result_cart.write("#{prefix&.rstrip}\n#{source.strip}\n#{suffix&.lstrip}")
